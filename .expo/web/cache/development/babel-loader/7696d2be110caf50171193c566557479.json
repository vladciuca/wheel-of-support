{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/vladciuca/Desktop/support-wheel/App.js\";\n\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport RNText from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Svg, { Path, G, Text, TSpan } from \"react-native-svg\";\nimport { PanGestureHandler, State } from \"react-native-gesture-handler\";\nimport * as d3Shape from \"d3-shape\";\nimport color from \"randomcolor\";\nimport { snap } from \"@popmotion/popcorn\";\nimport DateTimePicker from \"@react-native-community/datetimepicker\";\nimport { Icon } from \"react-native-elements\";\nimport WinnerPanel from \"./components/WinnerPanel\";\nimport SpinCounter from \"./components/SpinCounter\";\nimport MenuBar from \"./components/MenuBar\";\nimport AddParticipant from \"./components/AddParticipant\";\nimport ParticipantList from \"./components/ParticipantList\";\nimport InfoMessage from \"./components/InfoMessage\";\nvar employees = [\"Mark Zuckerberg\", \"Jeff Bezos\", \"Warren Buffett\", \"Elon Musk\", \"Robert Kiyosaki\", \"Johnny Cash\", \"Vlad Cristian Ciuca\", \"Frankie Valli\", \"Spiderman Peter Parker\", \"Batman Bruce Wayne\"];\n\nvar App = function App() {\n  var _useState = useState(new Date()),\n      _useState2 = _slicedToArray(_useState, 2),\n      date = _useState2[0],\n      setDate = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showDatePicker = _useState4[0],\n      setShowDatePicker = _useState4[1];\n\n  var _useState5 = useState(employees),\n      _useState6 = _slicedToArray(_useState5, 2),\n      participantsArray = _useState6[0],\n      setParticipantsArray = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      showAddParticipant = _useState8[0],\n      setShowAddParticipant = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      showParticipantList = _useState10[0],\n      setShowParticipantList = _useState10[1];\n\n  var _useState11 = useState(2),\n      _useState12 = _slicedToArray(_useState11, 2),\n      spins = _useState12[0],\n      setSpins = _useState12[1];\n\n  var _useState13 = useState(true),\n      _useState14 = _slicedToArray(_useState13, 2),\n      isEnabled = _useState14[0],\n      setIsEnabled = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      isSpinningFinished = _useState16[0],\n      setIsSpinningFinished = _useState16[1];\n\n  var _useState17 = useState([]),\n      _useState18 = _slicedToArray(_useState17, 2),\n      winnerArray = _useState18[0],\n      setWinnerArray = _useState18[1];\n\n  var _useState19 = useState([]),\n      _useState20 = _slicedToArray(_useState19, 2),\n      infoMessages = _useState20[0],\n      setInfoMessages = _useState20[1];\n\n  var _useState21 = useState(color({\n    luminosity: \"bright\",\n    hue: \"purple\",\n    count: participantsArray.length\n  })),\n      _useState22 = _slicedToArray(_useState21, 2),\n      colors = _useState22[0],\n      setColors = _useState22[1];\n\n  var showDateTimePicker = function showDateTimePicker() {\n    setShowDatePicker(!showDatePicker);\n  };\n\n  var onChangeDate = function onChangeDate(event, selectedDate) {\n    var currentDate = selectedDate || date;\n    showDatePicker(Platform.OS === \"ios\");\n    setDate(currentDate);\n  };\n\n  var toggleAddParticipantInput = function toggleAddParticipantInput() {\n    setShowAddParticipant(!showAddParticipant);\n    setShowParticipantList(false);\n  };\n\n  var toggleParticipantList = function toggleParticipantList() {\n    setShowParticipantList(!showParticipantList);\n    setShowAddParticipant(false);\n  };\n\n  var handleAddParticipant = function handleAddParticipant(value) {\n    var name = value.trim();\n\n    if (name === \"\") {\n      var _message = \"Please add a participant name\";\n      setInfoMessages([].concat(_toConsumableArray(infoMessages), [_message]));\n      return;\n    }\n\n    if (name.length < 3) {\n      var _message2 = \"Please enter 3 characters minimum\";\n      setInfoMessages([].concat(_toConsumableArray(infoMessages), [_message2]));\n      return;\n    }\n\n    if (participantsArray.find(function (name) {\n      return name === value;\n    })) {\n      var _message3 = \"A participant with this name \" + value + \" already exists\";\n\n      setInfoMessages([].concat(_toConsumableArray(infoMessages), [_message3]));\n      return;\n    }\n\n    Keyboard.dismiss();\n    setParticipantsArray([].concat(_toConsumableArray(participantsArray), [name]));\n    var message = \"Added \" + name + \" to participants\";\n    setInfoMessages([].concat(_toConsumableArray(infoMessages), [message]));\n    setShowAddParticipant(false);\n  };\n\n  var handleRemoveParticipant = function handleRemoveParticipant(value) {\n    var newParticipantsArray = participantsArray.filter(function (name) {\n      return name !== value;\n    });\n    setParticipantsArray(newParticipantsArray);\n    var message = \"Removed \" + value + \" from participants\";\n    setInfoMessages([].concat(_toConsumableArray(infoMessages), [message]));\n  };\n\n  var _Dimensions$get = Dimensions.get(\"screen\"),\n      width = _Dimensions$get.width,\n      height = _Dimensions$get.height;\n\n  var numberOfSegments = participantsArray.length;\n  var wheelSize = width * 0.85;\n  var wheelFontSize = 20;\n  var oneTurn = 360;\n  var angleBySegment = oneTurn / numberOfSegments;\n  var angleOffset = angleBySegment / 2;\n\n  var makeWheel = function makeWheel() {\n    var data = Array.from({\n      length: numberOfSegments\n    }).fill(1);\n    var arcs = d3Shape.pie()(data);\n    return arcs.map(function (arc, index) {\n      var instance = d3Shape.arc().padAngle(0.01).outerRadius(width / 2).innerRadius(20);\n      return {\n        path: instance(arc),\n        color: colors[index],\n        value: participantsArray[index],\n        centroid: instance.centroid(arc)\n      };\n    });\n  };\n\n  var wheelPaths = makeWheel();\n  var angle = useRef(new Animated.Value(0)).current;\n  var angleValue = 0;\n\n  var getWinnerIndex = function getWinnerIndex() {\n    var deg = Math.abs(Math.round(angleValue % oneTurn));\n\n    if (angleValue < 0) {\n      return Math.floor(deg / angleBySegment);\n    }\n\n    return (numberOfSegments - Math.floor(deg / angleBySegment)) % numberOfSegments;\n  };\n\n  var onPan = function onPan(_ref) {\n    var nativeEvent = _ref.nativeEvent;\n\n    if (nativeEvent.state === State.END) {\n      var velocityY = nativeEvent.velocityY;\n      Animated.decay(angle, {\n        velocity: velocityY / 1000,\n        deceleration: 0.999,\n        useNativeDriver: true\n      }).start(function () {\n        angle.setValue(angleValue % oneTurn);\n        var snapTo = snap(oneTurn / numberOfSegments);\n        Animated.timing(angle, {\n          toValue: snapTo(angleValue),\n          duration: 300,\n          useNativeDriver: true\n        }).start(function () {\n          var winnerIndex = getWinnerIndex();\n          var winner = wheelPaths[winnerIndex].value;\n\n          if (winnerArray.length > 0 && winnerArray[0] === winner) {\n            var message = winner + \" do 2 shifts! FREE SPIN\";\n            setInfoMessages([].concat(_toConsumableArray(infoMessages), [message]));\n            setIsEnabled(true);\n            setIsSpinningFinished(true);\n            return;\n          } else {\n            setIsEnabled(true);\n            setIsSpinningFinished(true);\n            setWinnerArray([].concat(_toConsumableArray(winnerArray), [winner]));\n            setSpins(spins - 1);\n          }\n        });\n      });\n    }\n  };\n\n  var resetSpins = function resetSpins() {\n    setSpins(2);\n    setWinnerArray([]);\n    var message = \"FATE RESETED\";\n    setInfoMessages([].concat(_toConsumableArray(infoMessages), [message]));\n  };\n\n  var renderKnob = function renderKnob() {\n    return React.createElement(Svg, {\n      width: 20,\n      height: 20 * 100 / 57,\n      viewBox: \"0 0 57 100\",\n      style: {\n        transform: [{\n          translateY: 10\n        }],\n        zIndex: 1\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 7\n      }\n    }, React.createElement(Path, {\n      d: \"M28.034,0C12.552,0,0,12.552,0,28.034S28.034,100,28.034,100s28.034-56.483,28.034-71.966S43.517,0,28.034,0z   M28.034,40.477c-6.871,0-12.442-5.572-12.442-12.442c0-6.872,5.571-12.442,12.442-12.442c6.872,0,12.442,5.57,12.442,12.442  C40.477,34.905,34.906,40.477,28.034,40.477z\",\n      fill: \"white\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  var renderSvgWheel = function renderSvgWheel() {\n    return React.createElement(View, {\n      style: styles.container,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 7\n      }\n    }, renderKnob(), React.createElement(Animated.View, {\n      style: {\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        transform: [{\n          rotate: angle.interpolate({\n            inputRange: [-oneTurn, 0, oneTurn],\n            outputRange: [\"-\" + oneTurn + \"deg\", \"0deg\", oneTurn + \"deg\"]\n          })\n        }]\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }\n    }, React.createElement(Svg, {\n      width: wheelSize,\n      height: wheelSize,\n      viewBox: \"0 0 \" + width + \" \" + width,\n      style: {\n        transform: [{\n          rotate: \"-\" + angleOffset + \"deg\"\n        }]\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }\n    }, React.createElement(G, {\n      y: width / 2,\n      x: width / 2,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 13\n      }\n    }, wheelPaths.map(function (arc, i) {\n      var _arc$centroid = _slicedToArray(arc.centroid, 2),\n          x = _arc$centroid[0],\n          y = _arc$centroid[1];\n\n      var number = arc.value.toString().replace(\" \", \"\").substring(0, 6).toUpperCase();\n      return React.createElement(G, {\n        key: \"arc-\" + i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 19\n        }\n      }, React.createElement(Path, {\n        d: arc.path,\n        fill: arc.color,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 21\n        }\n      }), React.createElement(G, {\n        rotation: i * oneTurn / numberOfSegments + angleOffset,\n        originX: x,\n        originY: y,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        x: x,\n        y: y - 70,\n        fill: \"white\",\n        textAnchor: \"middle\",\n        fontSize: wheelFontSize,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 23\n        }\n      }, Array.from({\n        length: number.length\n      }).map(function (_, j) {\n        return React.createElement(TSpan, {\n          x: x,\n          dy: wheelFontSize,\n          key: \"arc-\" + i + \"-slice-\" + j,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 29\n          }\n        }, number.charAt(j));\n      }))));\n    })))));\n  };\n\n  useEffect(function () {\n    angle.addListener(function (event) {\n      if (isEnabled) {\n        setIsEnabled(false);\n        setIsSpinningFinished(false);\n      }\n\n      angleValue = event.value;\n    });\n  });\n  useEffect(function () {\n    setColors(color({\n      luminosity: \"bright\",\n      hue: \"purple\",\n      count: participantsArray.length\n    }));\n  }, [participantsArray]);\n  useEffect(function () {\n    if (isSpinningFinished === false) {\n      setShowAddParticipant(false);\n      Keyboard.dismiss();\n    }\n  }, [isSpinningFinished]);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.infoMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }\n  }, infoMessages.map(function (message, index) {\n    return React.createElement(InfoMessage, {\n      key: index,\n      infoMessage: message,\n      onHide: function onHide() {\n        setInfoMessages(function (messages) {\n          return messages.filter(function (currentMessage) {\n            return currentMessage !== message;\n          });\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 11\n      }\n    });\n  })), React.createElement(View, {\n    style: styles.date,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 9\n    }\n  }, React.createElement(Button, {\n    color: \"#FFF\",\n    onPress: showDateTimePicker,\n    title: \"\" + date.toISOString().split(\"T\")[0].replace(\"/g/-\", \"/\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 11\n    }\n  })), showDatePicker && React.createElement(DateTimePicker, {\n    value: date,\n    mode: \"date\",\n    display: \"default\",\n    onChange: onChangeDate,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 11\n    }\n  })), React.createElement(MenuBar, {\n    participants: participantsArray.length,\n    toggleAddParticipantInput: toggleAddParticipantInput,\n    toggleParticipantList: toggleParticipantList,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }\n  }), React.createElement(WinnerPanel, {\n    winnerArray: winnerArray,\n    isSpinningFinished: isSpinningFinished,\n    width: width,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 7\n    }\n  }), numberOfSegments > 2 ? React.createElement(React.Fragment, null, React.createElement(PanGestureHandler, {\n    onHandlerStateChange: onPan,\n    enabled: spins === 0 ? false : isEnabled,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 11\n    }\n  }, React.createElement(View, {\n    style: styles.wheel,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 13\n    }\n  }, renderSvgWheel())), React.createElement(SpinCounter, {\n    spins: spins,\n    resetSpins: resetSpins,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 11\n    }\n  })) : React.createElement(RNText, {\n    style: styles.warning,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 9\n    }\n  }, \"Can't play with less than 3 participants :(\"), showAddParticipant && React.createElement(AddParticipant, {\n    handleAddParticipant: handleAddParticipant,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 9\n    }\n  }), showParticipantList && React.createElement(ParticipantList, {\n    participantsArray: participantsArray,\n    handleRemoveParticipant: handleRemoveParticipant,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 9\n    }\n  }), React.createElement(StatusBar, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#262335\",\n    color: \"#a487c3\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  wheel: {\n    zIndex: -2\n  },\n  date: {\n    position: \"absolute\",\n    top: 50,\n    zIndex: 10,\n    backgroundColor: \"#a487c3\",\n    borderRadius: 20\n  },\n  infoMessage: {\n    position: \"absolute\",\n    top: 80,\n    left: 0,\n    right: 0,\n    marginLeft: 80,\n    marginRight: 80,\n    zIndex: 2\n  },\n  warning: {\n    fontSize: 36,\n    color: \"#FFF\",\n    textAlign: \"center\",\n    padding: 40\n  }\n});","map":{"version":3,"sources":["/Users/vladciuca/Desktop/support-wheel/App.js"],"names":["StatusBar","React","useState","useEffect","useRef","Svg","Path","G","Text","TSpan","PanGestureHandler","State","d3Shape","color","snap","DateTimePicker","Icon","WinnerPanel","SpinCounter","MenuBar","AddParticipant","ParticipantList","InfoMessage","employees","App","Date","date","setDate","showDatePicker","setShowDatePicker","participantsArray","setParticipantsArray","showAddParticipant","setShowAddParticipant","showParticipantList","setShowParticipantList","spins","setSpins","isEnabled","setIsEnabled","isSpinningFinished","setIsSpinningFinished","winnerArray","setWinnerArray","infoMessages","setInfoMessages","luminosity","hue","count","length","colors","setColors","showDateTimePicker","onChangeDate","event","selectedDate","currentDate","Platform","OS","toggleAddParticipantInput","toggleParticipantList","handleAddParticipant","value","name","trim","message","find","Keyboard","dismiss","handleRemoveParticipant","newParticipantsArray","filter","Dimensions","get","width","height","numberOfSegments","wheelSize","wheelFontSize","oneTurn","angleBySegment","angleOffset","makeWheel","data","Array","from","fill","arcs","pie","map","arc","index","instance","padAngle","outerRadius","innerRadius","path","centroid","wheelPaths","angle","Animated","Value","current","angleValue","getWinnerIndex","deg","Math","abs","round","floor","onPan","nativeEvent","state","END","velocityY","decay","velocity","deceleration","useNativeDriver","start","setValue","snapTo","timing","toValue","duration","winnerIndex","winner","resetSpins","renderKnob","transform","translateY","zIndex","renderSvgWheel","styles","container","alignItems","justifyContent","rotate","interpolate","inputRange","outputRange","i","x","y","number","toString","replace","substring","toUpperCase","_","j","charAt","addListener","infoMessage","messages","currentMessage","toISOString","split","wheel","warning","StyleSheet","create","flex","backgroundColor","position","top","borderRadius","left","right","marginLeft","marginRight","fontSize","textAlign","padding"],"mappings":";;;;;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;;;;;;;;AAUA,OAAOC,GAAP,IAAcC,IAAd,EAAoBC,CAApB,EAAuBC,IAAvB,EAA6BC,KAA7B,QAA0C,kBAA1C;AACA,SAASC,iBAAT,EAA4BC,KAA5B,QAAyC,8BAAzC;AACA,OAAO,KAAKC,OAAZ,MAAyB,UAAzB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,OAAOC,cAAP,MAA2B,wCAA3B;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA,OAAOC,WAAP;AACA,OAAOC,WAAP;AACA,OAAOC,OAAP;AACA,OAAOC,cAAP;AACA,OAAOC,eAAP;AACA,OAAOC,WAAP;AAEA,IAAMC,SAAS,GAAG,CAChB,iBADgB,EAEhB,YAFgB,EAGhB,gBAHgB,EAIhB,WAJgB,EAKhB,iBALgB,EAMhB,aANgB,EAOhB,qBAPgB,EAQhB,eARgB,EAShB,wBATgB,EAUhB,oBAVgB,CAAlB;;AAaA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AAChB,kBAAwBtB,QAAQ,CAAC,IAAIuB,IAAJ,EAAD,CAAhC;AAAA;AAAA,MAAOC,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAA4CzB,QAAQ,CAAC,KAAD,CAApD;AAAA;AAAA,MAAO0B,cAAP;AAAA,MAAuBC,iBAAvB;;AACA,mBAAkD3B,QAAQ,CAACqB,SAAD,CAA1D;AAAA;AAAA,MAAOO,iBAAP;AAAA,MAA0BC,oBAA1B;;AACA,mBAAoD7B,QAAQ,CAAC,KAAD,CAA5D;AAAA;AAAA,MAAO8B,kBAAP;AAAA,MAA2BC,qBAA3B;;AACA,mBAAsD/B,QAAQ,CAAC,KAAD,CAA9D;AAAA;AAAA,MAAOgC,mBAAP;AAAA,MAA4BC,sBAA5B;;AACA,oBAA0BjC,QAAQ,CAAC,CAAD,CAAlC;AAAA;AAAA,MAAOkC,KAAP;AAAA,MAAcC,QAAd;;AACA,oBAAkCnC,QAAQ,CAAC,IAAD,CAA1C;AAAA;AAAA,MAAOoC,SAAP;AAAA,MAAkBC,YAAlB;;AACA,oBAAoDrC,QAAQ,CAAC,KAAD,CAA5D;AAAA;AAAA,MAAOsC,kBAAP;AAAA,MAA2BC,qBAA3B;;AACA,oBAAsCvC,QAAQ,CAAC,EAAD,CAA9C;AAAA;AAAA,MAAOwC,WAAP;AAAA,MAAoBC,cAApB;;AACA,oBAAwCzC,QAAQ,CAAC,EAAD,CAAhD;AAAA;AAAA,MAAO0C,YAAP;AAAA,MAAqBC,eAArB;;AACA,oBAA4B3C,QAAQ,CAClCW,KAAK,CAAC;AACJiC,IAAAA,UAAU,EAAE,QADR;AAEJC,IAAAA,GAAG,EAAE,QAFD;AAGJC,IAAAA,KAAK,EAAElB,iBAAiB,CAACmB;AAHrB,GAAD,CAD6B,CAApC;AAAA;AAAA,MAAOC,MAAP;AAAA,MAAeC,SAAf;;AAQA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/BvB,IAAAA,iBAAiB,CAAC,CAACD,cAAF,CAAjB;AACD,GAFD;;AAIA,MAAMyB,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAQC,YAAR,EAAyB;AAC5C,QAAMC,WAAW,GAAGD,YAAY,IAAI7B,IAApC;AACAE,IAAAA,cAAc,CAAC6B,QAAQ,CAACC,EAAT,KAAgB,KAAjB,CAAd;AACA/B,IAAAA,OAAO,CAAC6B,WAAD,CAAP;AACD,GAJD;;AAMA,MAAMG,yBAAyB,GAAG,SAA5BA,yBAA4B,GAAM;AACtC1B,IAAAA,qBAAqB,CAAC,CAACD,kBAAF,CAArB;AACAG,IAAAA,sBAAsB,CAAC,KAAD,CAAtB;AACD,GAHD;;AAKA,MAAMyB,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AAClCzB,IAAAA,sBAAsB,CAAC,CAACD,mBAAF,CAAtB;AACAD,IAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD,GAHD;;AAKA,MAAM4B,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,KAAD,EAAW;AACtC,QAAMC,IAAI,GAAGD,KAAK,CAACE,IAAN,EAAb;;AACA,QAAID,IAAI,KAAK,EAAb,EAAiB;AACf,UAAME,QAAO,GAAG,+BAAhB;AACApB,MAAAA,eAAe,8BAAKD,YAAL,IAAmBqB,QAAnB,GAAf;AACA;AACD;;AACD,QAAIF,IAAI,CAACd,MAAL,GAAc,CAAlB,EAAqB;AACnB,UAAMgB,SAAO,GAAG,mCAAhB;AACApB,MAAAA,eAAe,8BAAKD,YAAL,IAAmBqB,SAAnB,GAAf;AACA;AACD;;AACD,QAAInC,iBAAiB,CAACoC,IAAlB,CAAuB,UAACH,IAAD;AAAA,aAAUA,IAAI,KAAKD,KAAnB;AAAA,KAAvB,CAAJ,EAAsD;AACpD,UAAMG,SAAO,qCAAmCH,KAAnC,oBAAb;;AACAjB,MAAAA,eAAe,8BAAKD,YAAL,IAAmBqB,SAAnB,GAAf;AACA;AACD;;AAEDE,IAAAA,QAAQ,CAACC,OAAT;AACArC,IAAAA,oBAAoB,8BAAKD,iBAAL,IAAwBiC,IAAxB,GAApB;AACA,QAAME,OAAO,cAAYF,IAAZ,qBAAb;AACAlB,IAAAA,eAAe,8BAAKD,YAAL,IAAmBqB,OAAnB,GAAf;AACAhC,IAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD,GAvBD;;AAyBA,MAAMoC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACP,KAAD,EAAW;AACzC,QAAMQ,oBAAoB,GAAGxC,iBAAiB,CAACyC,MAAlB,CAC3B,UAACR,IAAD;AAAA,aAAUA,IAAI,KAAKD,KAAnB;AAAA,KAD2B,CAA7B;AAGA/B,IAAAA,oBAAoB,CAACuC,oBAAD,CAApB;AACA,QAAML,OAAO,gBAAcH,KAAd,uBAAb;AACAjB,IAAAA,eAAe,8BAAKD,YAAL,IAAmBqB,OAAnB,GAAf;AACD,GAPD;;AASA,wBAA0BO,UAAU,CAACC,GAAX,CAAe,QAAf,CAA1B;AAAA,MAAQC,KAAR,mBAAQA,KAAR;AAAA,MAAeC,MAAf,mBAAeA,MAAf;;AACA,MAAMC,gBAAgB,GAAG9C,iBAAiB,CAACmB,MAA3C;AACA,MAAM4B,SAAS,GAAGH,KAAK,GAAG,IAA1B;AACA,MAAMI,aAAa,GAAG,EAAtB;AACA,MAAMC,OAAO,GAAG,GAAhB;AACA,MAAMC,cAAc,GAAGD,OAAO,GAAGH,gBAAjC;AACA,MAAMK,WAAW,GAAGD,cAAc,GAAG,CAArC;;AAEA,MAAME,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,QAAMC,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAW;AAAEpC,MAAAA,MAAM,EAAE2B;AAAV,KAAX,EAAyCU,IAAzC,CAA8C,CAA9C,CAAb;AACA,QAAMC,IAAI,GAAG3E,OAAO,CAAC4E,GAAR,GAAcL,IAAd,CAAb;AAEA,WAAOI,IAAI,CAACE,GAAL,CAAS,UAACC,GAAD,EAAMC,KAAN,EAAgB;AAC9B,UAAMC,QAAQ,GAAGhF,OAAO,CACrB8E,GADc,GAEdG,QAFc,CAEL,IAFK,EAGdC,WAHc,CAGFpB,KAAK,GAAG,CAHN,EAIdqB,WAJc,CAIF,EAJE,CAAjB;AAMA,aAAO;AACLC,QAAAA,IAAI,EAAEJ,QAAQ,CAACF,GAAD,CADT;AAEL7E,QAAAA,KAAK,EAAEqC,MAAM,CAACyC,KAAD,CAFR;AAGL7B,QAAAA,KAAK,EAAEhC,iBAAiB,CAAC6D,KAAD,CAHnB;AAILM,QAAAA,QAAQ,EAAEL,QAAQ,CAACK,QAAT,CAAkBP,GAAlB;AAJL,OAAP;AAMD,KAbM,CAAP;AAcD,GAlBD;;AAoBA,MAAMQ,UAAU,GAAGhB,SAAS,EAA5B;AAEA,MAAMiB,KAAK,GAAG/F,MAAM,CAAC,IAAIgG,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAD,CAAN,CAA8BC,OAA5C;AACA,MAAIC,UAAU,GAAG,CAAjB;;AAEA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,QAAMC,GAAG,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAWL,UAAU,GAAGxB,OAAxB,CAAT,CAAZ;;AAEA,QAAIwB,UAAU,GAAG,CAAjB,EAAoB;AAClB,aAAOG,IAAI,CAACG,KAAL,CAAWJ,GAAG,GAAGzB,cAAjB,CAAP;AACD;;AAED,WACE,CAACJ,gBAAgB,GAAG8B,IAAI,CAACG,KAAL,CAAWJ,GAAG,GAAGzB,cAAjB,CAApB,IAAwDJ,gBAD1D;AAGD,GAVD;;AAYA,MAAMkC,KAAK,GAAG,SAARA,KAAQ,OAAqB;AAAA,QAAlBC,WAAkB,QAAlBA,WAAkB;;AACjC,QAAIA,WAAW,CAACC,KAAZ,KAAsBrG,KAAK,CAACsG,GAAhC,EAAqC;AACnC,UAAQC,SAAR,GAAsBH,WAAtB,CAAQG,SAAR;AAEAd,MAAAA,QAAQ,CAACe,KAAT,CAAehB,KAAf,EAAsB;AACpBiB,QAAAA,QAAQ,EAAEF,SAAS,GAAG,IADF;AAEpBG,QAAAA,YAAY,EAAE,KAFM;AAGpBC,QAAAA,eAAe,EAAE;AAHG,OAAtB,EAIGC,KAJH,CAIS,YAAM;AACbpB,QAAAA,KAAK,CAACqB,QAAN,CAAejB,UAAU,GAAGxB,OAA5B;AACA,YAAM0C,MAAM,GAAG3G,IAAI,CAACiE,OAAO,GAAGH,gBAAX,CAAnB;AACAwB,QAAAA,QAAQ,CAACsB,MAAT,CAAgBvB,KAAhB,EAAuB;AACrBwB,UAAAA,OAAO,EAAEF,MAAM,CAAClB,UAAD,CADM;AAErBqB,UAAAA,QAAQ,EAAE,GAFW;AAGrBN,UAAAA,eAAe,EAAE;AAHI,SAAvB,EAIGC,KAJH,CAIS,YAAM;AACb,cAAMM,WAAW,GAAGrB,cAAc,EAAlC;AACA,cAAMsB,MAAM,GAAG5B,UAAU,CAAC2B,WAAD,CAAV,CAAwB/D,KAAvC;;AAEA,cAAIpB,WAAW,CAACO,MAAZ,GAAqB,CAArB,IAA0BP,WAAW,CAAC,CAAD,CAAX,KAAmBoF,MAAjD,EAAyD;AACvD,gBAAM7D,OAAO,GAAM6D,MAAN,4BAAb;AACAjF,YAAAA,eAAe,8BAAKD,YAAL,IAAmBqB,OAAnB,GAAf;AACA1B,YAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,YAAAA,qBAAqB,CAAC,IAAD,CAArB;AACA;AACD,WAND,MAMO;AACLF,YAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,YAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAE,YAAAA,cAAc,8BAAKD,WAAL,IAAkBoF,MAAlB,GAAd;AACAzF,YAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;AACF,SApBD;AAqBD,OA5BD;AA6BD;AACF,GAlCD;;AAoCA,MAAM2F,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB1F,IAAAA,QAAQ,CAAC,CAAD,CAAR;AACAM,IAAAA,cAAc,CAAC,EAAD,CAAd;AACA,QAAMsB,OAAO,iBAAb;AACApB,IAAAA,eAAe,8BAAKD,YAAL,IAAmBqB,OAAnB,GAAf;AACD,GALD;;AAOA,MAAM+D,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,WACE,oBAAC,GAAD;AACE,MAAA,KAAK,EAAE,EADT;AAEE,MAAA,MAAM,EAAG,KAAK,GAAN,GAAa,EAFvB;AAGE,MAAA,OAAO,cAHT;AAIE,MAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE,CAAC;AAAEC,UAAAA,UAAU,EAAE;AAAd,SAAD,CAAb;AAAmCC,QAAAA,MAAM,EAAE;AAA3C,OAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAME,oBAAC,IAAD;AACE,MAAA,CAAC,EAAC,kRADJ;AAEE,MAAA,IAAI,EAAC,OAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CADF;AAaD,GAdD;;AAgBA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,WACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGN,UAAU,EADb,EAEE,oBAAC,QAAD,CAAU,IAAV;AACE,MAAA,KAAK,EAAE;AACLO,QAAAA,UAAU,EAAE,QADP;AAELC,QAAAA,cAAc,EAAE,QAFX;AAGLP,QAAAA,SAAS,EAAE,CACT;AACEQ,UAAAA,MAAM,EAAEtC,KAAK,CAACuC,WAAN,CAAkB;AACxBC,YAAAA,UAAU,EAAE,CAAC,CAAC5D,OAAF,EAAW,CAAX,EAAcA,OAAd,CADY;AAExB6D,YAAAA,WAAW,EAAE,OAAK7D,OAAL,kBAA8BA,OAA9B;AAFW,WAAlB;AADV,SADS;AAHN,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAcE,oBAAC,GAAD;AACE,MAAA,KAAK,EAAEF,SADT;AAEE,MAAA,MAAM,EAAEA,SAFV;AAGE,MAAA,OAAO,WAASH,KAAT,SAAkBA,KAH3B;AAIE,MAAA,KAAK,EAAE;AAAEuD,QAAAA,SAAS,EAAE,CAAC;AAAEQ,UAAAA,MAAM,QAAMxD,WAAN;AAAR,SAAD;AAAb,OAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAME,oBAAC,CAAD;AAAG,MAAA,CAAC,EAAEP,KAAK,GAAG,CAAd;AAAiB,MAAA,CAAC,EAAEA,KAAK,GAAG,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGwB,UAAU,CAACT,GAAX,CAAe,UAACC,GAAD,EAAMmD,CAAN,EAAY;AAC1B,yCAAenD,GAAG,CAACO,QAAnB;AAAA,UAAO6C,CAAP;AAAA,UAAUC,CAAV;;AAEA,UAAMC,MAAM,GAAGtD,GAAG,CAAC5B,KAAJ,CACZmF,QADY,GAEZC,OAFY,CAEJ,GAFI,EAEC,EAFD,EAGZC,SAHY,CAGF,CAHE,EAGC,CAHD,EAIZC,WAJY,EAAf;AAKA,aACE,oBAAC,CAAD;AAAG,QAAA,GAAG,WAASP,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,CAAC,EAAEnD,GAAG,CAACM,IAAb;AAAmB,QAAA,IAAI,EAAEN,GAAG,CAAC7E,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,CAAD;AACE,QAAA,QAAQ,EAAGgI,CAAC,GAAG9D,OAAL,GAAgBH,gBAAhB,GAAmCK,WAD/C;AAEE,QAAA,OAAO,EAAE6D,CAFX;AAGE,QAAA,OAAO,EAAEC,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKE,oBAAC,IAAD;AACE,QAAA,CAAC,EAAED,CADL;AAEE,QAAA,CAAC,EAAEC,CAAC,GAAG,EAFT;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,UAAU,EAAC,QAJb;AAKE,QAAA,QAAQ,EAAEjE,aALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOGM,KAAK,CAACC,IAAN,CAAW;AAAEpC,QAAAA,MAAM,EAAE+F,MAAM,CAAC/F;AAAjB,OAAX,EAAsCwC,GAAtC,CAA0C,UAAC4D,CAAD,EAAIC,CAAJ,EAAU;AACnD,eACE,oBAAC,KAAD;AACE,UAAA,CAAC,EAAER,CADL;AAEE,UAAA,EAAE,EAAEhE,aAFN;AAGE,UAAA,GAAG,WAAS+D,CAAT,eAAoBS,CAHzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAKGN,MAAM,CAACO,MAAP,CAAcD,CAAd,CALH,CADF;AASD,OAVA,CAPH,CALF,CAFF,CADF;AA8BD,KAtCA,CADH,CANF,CAdF,CAFF,CADF;AAoED,GArED;;AAuEAnJ,EAAAA,SAAS,CAAC,YAAM;AACdgG,IAAAA,KAAK,CAACqD,WAAN,CAAkB,UAAClG,KAAD,EAAW;AAC3B,UAAIhB,SAAJ,EAAe;AACbC,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD;;AACD8D,MAAAA,UAAU,GAAGjD,KAAK,CAACQ,KAAnB;AACD,KAND;AAOD,GARQ,CAAT;AAUA3D,EAAAA,SAAS,CAAC,YAAM;AACdgD,IAAAA,SAAS,CACPtC,KAAK,CAAC;AACJiC,MAAAA,UAAU,EAAE,QADR;AAEJC,MAAAA,GAAG,EAAE,QAFD;AAGJC,MAAAA,KAAK,EAAElB,iBAAiB,CAACmB;AAHrB,KAAD,CADE,CAAT;AAOD,GARQ,EAQN,CAACnB,iBAAD,CARM,CAAT;AAUA3B,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIqC,kBAAkB,KAAK,KAA3B,EAAkC;AAChCP,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACAkC,MAAAA,QAAQ,CAACC,OAAT;AACD;AACF,GALQ,EAKN,CAAC5B,kBAAD,CALM,CAAT;AAOA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE6F,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACoB,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG7G,YAAY,CAAC6C,GAAb,CAAiB,UAACxB,OAAD,EAAU0B,KAAV;AAAA,WAChB,oBAAC,WAAD;AACE,MAAA,GAAG,EAAEA,KADP;AAEE,MAAA,WAAW,EAAE1B,OAFf;AAGE,MAAA,MAAM,EAAE,kBAAM;AACZpB,QAAAA,eAAe,CAAC,UAAC6G,QAAD;AAAA,iBACdA,QAAQ,CAACnF,MAAT,CAAgB,UAACoF,cAAD;AAAA,mBAAoBA,cAAc,KAAK1F,OAAvC;AAAA,WAAhB,CADc;AAAA,SAAD,CAAf;AAGD,OAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADgB;AAAA,GAAjB,CADH,CADF,EAcE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEoE,MAAM,CAAC3G,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,MADR;AAEE,IAAA,OAAO,EAAE0B,kBAFX;AAGE,IAAA,KAAK,OAAK1B,IAAI,CAACkI,WAAL,GAAmBC,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,EAAiCX,OAAjC,CAAyC,MAAzC,EAAiD,GAAjD,CAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF,EAYGtH,cAAc,IACb,oBAAC,cAAD;AACE,IAAA,KAAK,EAAEF,IADT;AAEE,IAAA,IAAI,EAAE,MAFR;AAGE,IAAA,OAAO,EAAC,SAHV;AAIE,IAAA,QAAQ,EAAE2B,YAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbJ,CAdF,EAmCE,oBAAC,OAAD;AACE,IAAA,YAAY,EAAEvB,iBAAiB,CAACmB,MADlC;AAEE,IAAA,yBAAyB,EAAEU,yBAF7B;AAGE,IAAA,qBAAqB,EAAEC,qBAHzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnCF,EAwCE,oBAAC,WAAD;AACE,IAAA,WAAW,EAAElB,WADf;AAEE,IAAA,kBAAkB,EAAEF,kBAFtB;AAGE,IAAA,KAAK,EAAEkC,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxCF,EA6CGE,gBAAgB,GAAG,CAAnB,GACC,0CACE,oBAAC,iBAAD;AACE,IAAA,oBAAoB,EAAEkC,KADxB;AAEE,IAAA,OAAO,EAAE1E,KAAK,KAAK,CAAV,GAAc,KAAd,GAAsBE,SAFjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE+F,MAAM,CAACyB,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4B1B,cAAc,EAA1C,CAJF,CADF,EAQE,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAEhG,KAApB;AAA2B,IAAA,UAAU,EAAE2F,UAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADD,GAYC,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAEM,MAAM,CAAC0B,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAzDJ,EA8DG/H,kBAAkB,IACjB,oBAAC,cAAD;AAAgB,IAAA,oBAAoB,EAAE6B,oBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA/DJ,EAiEG3B,mBAAmB,IAClB,oBAAC,eAAD;AACE,IAAA,iBAAiB,EAAEJ,iBADrB;AAEE,IAAA,uBAAuB,EAAEuC,uBAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlEJ,EAuEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvEF,CADF;AA2ED,CA9VD;;AAgWA,eAAe7C,GAAf;AAEA,IAAM6G,MAAM,GAAG2B,UAAU,CAACC,MAAX,CAAkB;AAC/B3B,EAAAA,SAAS,EAAE;AACT4B,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,SAFR;AAGTtJ,IAAAA,KAAK,EAAE,SAHE;AAIT0H,IAAAA,UAAU,EAAE,QAJH;AAKTC,IAAAA,cAAc,EAAE;AALP,GADoB;AAQ/BsB,EAAAA,KAAK,EAAE;AACL3B,IAAAA,MAAM,EAAE,CAAC;AADJ,GARwB;AAW/BzG,EAAAA,IAAI,EAAE;AACJ0I,IAAAA,QAAQ,EAAE,UADN;AAEJC,IAAAA,GAAG,EAAE,EAFD;AAGJlC,IAAAA,MAAM,EAAE,EAHJ;AAIJgC,IAAAA,eAAe,EAAE,SAJb;AAKJG,IAAAA,YAAY,EAAE;AALV,GAXyB;AAkB/Bb,EAAAA,WAAW,EAAE;AACXW,IAAAA,QAAQ,EAAE,UADC;AAEXC,IAAAA,GAAG,EAAE,EAFM;AAGXE,IAAAA,IAAI,EAAE,CAHK;AAIXC,IAAAA,KAAK,EAAE,CAJI;AAKXC,IAAAA,UAAU,EAAE,EALD;AAMXC,IAAAA,WAAW,EAAE,EANF;AAOXvC,IAAAA,MAAM,EAAE;AAPG,GAlBkB;AA2B/B4B,EAAAA,OAAO,EAAE;AACPY,IAAAA,QAAQ,EAAE,EADH;AAEP9J,IAAAA,KAAK,EAAE,MAFA;AAGP+J,IAAAA,SAAS,EAAE,QAHJ;AAIPC,IAAAA,OAAO,EAAE;AAJF;AA3BsB,CAAlB,CAAf","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport {\n  StyleSheet,\n  Text as RNText,\n  View,\n  Dimensions,\n  Animated,\n  Keyboard,\n  Button,\n} from \"react-native\";\nimport Svg, { Path, G, Text, TSpan } from \"react-native-svg\";\nimport { PanGestureHandler, State } from \"react-native-gesture-handler\";\nimport * as d3Shape from \"d3-shape\";\nimport color from \"randomcolor\";\nimport { snap } from \"@popmotion/popcorn\";\nimport DateTimePicker from \"@react-native-community/datetimepicker\";\nimport { Icon } from \"react-native-elements\";\nimport WinnerPanel from \"./components/WinnerPanel\";\nimport SpinCounter from \"./components/SpinCounter\";\nimport MenuBar from \"./components/MenuBar\";\nimport AddParticipant from \"./components/AddParticipant\";\nimport ParticipantList from \"./components/ParticipantList\";\nimport InfoMessage from \"./components/InfoMessage\";\n\nconst employees = [\n  \"Mark Zuckerberg\",\n  \"Jeff Bezos\",\n  \"Warren Buffett\",\n  \"Elon Musk\",\n  \"Robert Kiyosaki\",\n  \"Johnny Cash\",\n  \"Vlad Cristian Ciuca\",\n  \"Frankie Valli\",\n  \"Spiderman Peter Parker\",\n  \"Batman Bruce Wayne\",\n];\n\nconst App = () => {\n  const [date, setDate] = useState(new Date());\n  const [showDatePicker, setShowDatePicker] = useState(false);\n  const [participantsArray, setParticipantsArray] = useState(employees);\n  const [showAddParticipant, setShowAddParticipant] = useState(false);\n  const [showParticipantList, setShowParticipantList] = useState(false);\n  const [spins, setSpins] = useState(2);\n  const [isEnabled, setIsEnabled] = useState(true);\n  const [isSpinningFinished, setIsSpinningFinished] = useState(false);\n  const [winnerArray, setWinnerArray] = useState([]);\n  const [infoMessages, setInfoMessages] = useState([]);\n  const [colors, setColors] = useState(\n    color({\n      luminosity: \"bright\",\n      hue: \"purple\",\n      count: participantsArray.length,\n    })\n  );\n\n  const showDateTimePicker = () => {\n    setShowDatePicker(!showDatePicker);\n  };\n\n  const onChangeDate = (event, selectedDate) => {\n    const currentDate = selectedDate || date;\n    showDatePicker(Platform.OS === \"ios\");\n    setDate(currentDate);\n  };\n\n  const toggleAddParticipantInput = () => {\n    setShowAddParticipant(!showAddParticipant);\n    setShowParticipantList(false);\n  };\n\n  const toggleParticipantList = () => {\n    setShowParticipantList(!showParticipantList);\n    setShowAddParticipant(false);\n  };\n\n  const handleAddParticipant = (value) => {\n    const name = value.trim();\n    if (name === \"\") {\n      const message = \"Please add a participant name\";\n      setInfoMessages([...infoMessages, message]);\n      return;\n    }\n    if (name.length < 3) {\n      const message = \"Please enter 3 characters minimum\";\n      setInfoMessages([...infoMessages, message]);\n      return;\n    }\n    if (participantsArray.find((name) => name === value)) {\n      const message = `A participant with this name ${value} already exists`;\n      setInfoMessages([...infoMessages, message]);\n      return;\n    }\n\n    Keyboard.dismiss();\n    setParticipantsArray([...participantsArray, name]);\n    const message = `Added ${name} to participants`;\n    setInfoMessages([...infoMessages, message]);\n    setShowAddParticipant(false);\n  };\n\n  const handleRemoveParticipant = (value) => {\n    const newParticipantsArray = participantsArray.filter(\n      (name) => name !== value\n    );\n    setParticipantsArray(newParticipantsArray);\n    const message = `Removed ${value} from participants`;\n    setInfoMessages([...infoMessages, message]);\n  };\n\n  const { width, height } = Dimensions.get(\"screen\");\n  const numberOfSegments = participantsArray.length;\n  const wheelSize = width * 0.85;\n  const wheelFontSize = 20;\n  const oneTurn = 360;\n  const angleBySegment = oneTurn / numberOfSegments;\n  const angleOffset = angleBySegment / 2;\n\n  const makeWheel = () => {\n    const data = Array.from({ length: numberOfSegments }).fill(1);\n    const arcs = d3Shape.pie()(data);\n\n    return arcs.map((arc, index) => {\n      const instance = d3Shape\n        .arc()\n        .padAngle(0.01)\n        .outerRadius(width / 2)\n        .innerRadius(20);\n\n      return {\n        path: instance(arc),\n        color: colors[index],\n        value: participantsArray[index],\n        centroid: instance.centroid(arc),\n      };\n    });\n  };\n\n  const wheelPaths = makeWheel();\n\n  const angle = useRef(new Animated.Value(0)).current;\n  let angleValue = 0;\n\n  const getWinnerIndex = () => {\n    const deg = Math.abs(Math.round(angleValue % oneTurn));\n    // wheel turning counterclockwise\n    if (angleValue < 0) {\n      return Math.floor(deg / angleBySegment);\n    }\n    // wheel turning clockwise\n    return (\n      (numberOfSegments - Math.floor(deg / angleBySegment)) % numberOfSegments\n    );\n  };\n\n  const onPan = ({ nativeEvent }) => {\n    if (nativeEvent.state === State.END) {\n      const { velocityY } = nativeEvent;\n\n      Animated.decay(angle, {\n        velocity: velocityY / 1000,\n        deceleration: 0.999,\n        useNativeDriver: true,\n      }).start(() => {\n        angle.setValue(angleValue % oneTurn);\n        const snapTo = snap(oneTurn / numberOfSegments);\n        Animated.timing(angle, {\n          toValue: snapTo(angleValue),\n          duration: 300,\n          useNativeDriver: true,\n        }).start(() => {\n          const winnerIndex = getWinnerIndex();\n          const winner = wheelPaths[winnerIndex].value;\n\n          if (winnerArray.length > 0 && winnerArray[0] === winner) {\n            const message = `${winner} do 2 shifts! FREE SPIN`;\n            setInfoMessages([...infoMessages, message]);\n            setIsEnabled(true);\n            setIsSpinningFinished(true);\n            return;\n          } else {\n            setIsEnabled(true);\n            setIsSpinningFinished(true);\n            setWinnerArray([...winnerArray, winner]);\n            setSpins(spins - 1);\n          }\n        });\n      });\n    }\n  };\n\n  const resetSpins = () => {\n    setSpins(2);\n    setWinnerArray([]);\n    const message = `FATE RESETED`;\n    setInfoMessages([...infoMessages, message]);\n  };\n\n  const renderKnob = () => {\n    return (\n      <Svg\n        width={20}\n        height={(20 * 100) / 57}\n        viewBox={`0 0 57 100`}\n        style={{ transform: [{ translateY: 10 }], zIndex: 1 }}\n      >\n        <Path\n          d=\"M28.034,0C12.552,0,0,12.552,0,28.034S28.034,100,28.034,100s28.034-56.483,28.034-71.966S43.517,0,28.034,0z   M28.034,40.477c-6.871,0-12.442-5.572-12.442-12.442c0-6.872,5.571-12.442,12.442-12.442c6.872,0,12.442,5.57,12.442,12.442  C40.477,34.905,34.906,40.477,28.034,40.477z\"\n          fill=\"white\"\n        />\n      </Svg>\n    );\n  };\n\n  const renderSvgWheel = () => {\n    return (\n      <View style={styles.container}>\n        {renderKnob()}\n        <Animated.View\n          style={{\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            transform: [\n              {\n                rotate: angle.interpolate({\n                  inputRange: [-oneTurn, 0, oneTurn],\n                  outputRange: [`-${oneTurn}deg`, `0deg`, `${oneTurn}deg`],\n                }),\n              },\n            ],\n          }}\n        >\n          <Svg\n            width={wheelSize}\n            height={wheelSize}\n            viewBox={`0 0 ${width} ${width}`}\n            style={{ transform: [{ rotate: `-${angleOffset}deg` }] }}\n          >\n            <G y={width / 2} x={width / 2}>\n              {wheelPaths.map((arc, i) => {\n                const [x, y] = arc.centroid;\n                //add names from array here\n                const number = arc.value\n                  .toString()\n                  .replace(\" \", \"\")\n                  .substring(0, 6)\n                  .toUpperCase();\n                return (\n                  <G key={`arc-${i}`}>\n                    <Path d={arc.path} fill={arc.color}></Path>\n                    <G\n                      rotation={(i * oneTurn) / numberOfSegments + angleOffset}\n                      originX={x}\n                      originY={y}\n                    >\n                      <Text\n                        x={x}\n                        y={y - 70}\n                        fill=\"white\"\n                        textAnchor=\"middle\"\n                        fontSize={wheelFontSize}\n                      >\n                        {Array.from({ length: number.length }).map((_, j) => {\n                          return (\n                            <TSpan\n                              x={x}\n                              dy={wheelFontSize}\n                              key={`arc-${i}-slice-${j}`}\n                            >\n                              {number.charAt(j)}\n                            </TSpan>\n                          );\n                        })}\n                      </Text>\n                    </G>\n                  </G>\n                );\n              })}\n            </G>\n          </Svg>\n        </Animated.View>\n      </View>\n    );\n  };\n\n  useEffect(() => {\n    angle.addListener((event) => {\n      if (isEnabled) {\n        setIsEnabled(false);\n        setIsSpinningFinished(false);\n      }\n      angleValue = event.value;\n    });\n  });\n\n  useEffect(() => {\n    setColors(\n      color({\n        luminosity: \"bright\",\n        hue: \"purple\",\n        count: participantsArray.length,\n      })\n    );\n  }, [participantsArray]);\n\n  useEffect(() => {\n    if (isSpinningFinished === false) {\n      setShowAddParticipant(false);\n      Keyboard.dismiss();\n    }\n  }, [isSpinningFinished]);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.infoMessage}>\n        {infoMessages.map((message, index) => (\n          <InfoMessage\n            key={index}\n            infoMessage={message}\n            onHide={() => {\n              setInfoMessages((messages) =>\n                messages.filter((currentMessage) => currentMessage !== message)\n              );\n            }}\n          />\n        ))}\n      </View>\n      <View style={styles.date}>\n        <View>\n          {/* <Text>{date.toISOString().split(\"T\")[0].replace(\"/g/-\", \"/\")}</Text> */}\n\n          {/* <Icon name=\"calendar\" color=\"#FFF\" /> */}\n\n          <Button\n            color=\"#FFF\"\n            onPress={showDateTimePicker}\n            title={`${date.toISOString().split(\"T\")[0].replace(\"/g/-\", \"/\")}`}\n          />\n        </View>\n        {showDatePicker && (\n          <DateTimePicker\n            value={date}\n            mode={\"date\"}\n            display=\"default\"\n            onChange={onChangeDate}\n          />\n        )}\n      </View>\n      <MenuBar\n        participants={participantsArray.length}\n        toggleAddParticipantInput={toggleAddParticipantInput}\n        toggleParticipantList={toggleParticipantList}\n      />\n      <WinnerPanel\n        winnerArray={winnerArray}\n        isSpinningFinished={isSpinningFinished}\n        width={width}\n      />\n      {numberOfSegments > 2 ? (\n        <>\n          <PanGestureHandler\n            onHandlerStateChange={onPan}\n            enabled={spins === 0 ? false : isEnabled}\n          >\n            <View style={styles.wheel}>{renderSvgWheel()}</View>\n          </PanGestureHandler>\n\n          <SpinCounter spins={spins} resetSpins={resetSpins} />\n        </>\n      ) : (\n        <RNText style={styles.warning}>\n          Can't play with less than 3 participants :(\n        </RNText>\n      )}\n\n      {showAddParticipant && (\n        <AddParticipant handleAddParticipant={handleAddParticipant} />\n      )}\n      {showParticipantList && (\n        <ParticipantList\n          participantsArray={participantsArray}\n          handleRemoveParticipant={handleRemoveParticipant}\n        />\n      )}\n      <StatusBar />\n    </View>\n  );\n};\n\nexport default App;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#262335\",\n    color: \"#a487c3\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  wheel: {\n    zIndex: -2,\n  },\n  date: {\n    position: \"absolute\",\n    top: 50,\n    zIndex: 10,\n    backgroundColor: \"#a487c3\",\n    borderRadius: 20,\n  },\n  infoMessage: {\n    position: \"absolute\",\n    top: 80,\n    left: 0,\n    right: 0,\n    marginLeft: 80,\n    marginRight: 80,\n    zIndex: 2,\n  },\n  warning: {\n    fontSize: 36,\n    color: \"#FFF\",\n    textAlign: \"center\",\n    padding: 40,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}