{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/vladciuca/Desktop/support-wheel/components/InfoMessage.js\";\n\nimport React, { useEffect, useRef } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\n\nvar InfoMessage = function InfoMessage(_ref) {\n  var infoMessage = _ref.infoMessage,\n      onHide = _ref.onHide;\n  var opacity = useRef(new Animated.Value(0)).current;\n  useEffect(function () {\n    Animated.sequence([Animated.timing(opacity, {\n      toValue: 1,\n      duration: 500,\n      useNativeDriver: true\n    }), Animated.delay(2000), Animated.timing(opacity, {\n      toValue: 0,\n      duration: 500,\n      useNativeDriver: true\n    })]).start(function () {\n      onHide();\n    });\n  }, []);\n  return React.createElement(Animated.View, {\n    style: {\n      opacity: opacity,\n      padding: 8,\n      marginVertical: 5,\n      backgroundColor: \"rgba(255, 255, 255, 0.9)\",\n      borderRadius: 5,\n      shadowColor: \"black\",\n      shadowOffset: {\n        width: 0,\n        height: 3\n      },\n      shadowOpacity: 0.15,\n      shadowRadius: 5,\n      elevation: 6,\n      transform: [{\n        translateY: opacity.interpolate({\n          inputRange: [0, 1],\n          outputRange: [-20, 0]\n        })\n      }]\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.message,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, infoMessage));\n};\n\nexport default InfoMessage;\nvar styles = StyleSheet.create({\n  message: {\n    textAlign: \"center\"\n  }\n});","map":{"version":3,"sources":["/Users/vladciuca/Desktop/support-wheel/components/InfoMessage.js"],"names":["React","useEffect","useRef","InfoMessage","infoMessage","onHide","opacity","Animated","Value","current","sequence","timing","toValue","duration","useNativeDriver","delay","start","padding","marginVertical","backgroundColor","borderRadius","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","transform","translateY","interpolate","inputRange","outputRange","styles","message","StyleSheet","create","textAlign"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;;;;;;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAA6B;AAAA,MAA1BC,WAA0B,QAA1BA,WAA0B;AAAA,MAAbC,MAAa,QAAbA,MAAa;AAC/C,MAAMC,OAAO,GAAGJ,MAAM,CAAC,IAAIK,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAD,CAAN,CAA8BC,OAA9C;AAEAR,EAAAA,SAAS,CAAC,YAAM;AACdM,IAAAA,QAAQ,CAACG,QAAT,CAAkB,CAChBH,QAAQ,CAACI,MAAT,CAAgBL,OAAhB,EAAyB;AACvBM,MAAAA,OAAO,EAAE,CADc;AAEvBC,MAAAA,QAAQ,EAAE,GAFa;AAGvBC,MAAAA,eAAe,EAAE;AAHM,KAAzB,CADgB,EAMhBP,QAAQ,CAACQ,KAAT,CAAe,IAAf,CANgB,EAOhBR,QAAQ,CAACI,MAAT,CAAgBL,OAAhB,EAAyB;AACvBM,MAAAA,OAAO,EAAE,CADc;AAEvBC,MAAAA,QAAQ,EAAE,GAFa;AAGvBC,MAAAA,eAAe,EAAE;AAHM,KAAzB,CAPgB,CAAlB,EAYGE,KAZH,CAYS,YAAM;AACbX,MAAAA,MAAM;AACP,KAdD;AAeD,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,SACE,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAPA,OADK;AAELW,MAAAA,OAAO,EAAE,CAFJ;AAGLC,MAAAA,cAAc,EAAE,CAHX;AAILC,MAAAA,eAAe,EAAE,0BAJZ;AAKLC,MAAAA,YAAY,EAAE,CALT;AAMLC,MAAAA,WAAW,EAAE,OANR;AAOLC,MAAAA,YAAY,EAAE;AACZC,QAAAA,KAAK,EAAE,CADK;AAEZC,QAAAA,MAAM,EAAE;AAFI,OAPT;AAWLC,MAAAA,aAAa,EAAE,IAXV;AAYLC,MAAAA,YAAY,EAAE,CAZT;AAaLC,MAAAA,SAAS,EAAE,CAbN;AAcLC,MAAAA,SAAS,EAAE,CACT;AACEC,QAAAA,UAAU,EAAEvB,OAAO,CAACwB,WAAR,CAAoB;AAC9BC,UAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADkB;AAE9BC,UAAAA,WAAW,EAAE,CAAC,CAAC,EAAF,EAAM,CAAN;AAFiB,SAApB;AADd,OADS;AAdN,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAyBE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8B9B,WAA9B,CAzBF,CADF;AA6BD,CAlDD;;AAoDA,eAAeD,WAAf;AAEA,IAAM8B,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,OAAO,EAAE;AAEPG,IAAAA,SAAS,EAAE;AAFJ;AADsB,CAAlB,CAAf","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { StyleSheet, Text, View, Animated } from \"react-native\";\n\nconst InfoMessage = ({ infoMessage, onHide }) => {\n  const opacity = useRef(new Animated.Value(0)).current;\n\n  useEffect(() => {\n    Animated.sequence([\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: 500,\n        useNativeDriver: true,\n      }),\n      Animated.delay(2000),\n      Animated.timing(opacity, {\n        toValue: 0,\n        duration: 500,\n        useNativeDriver: true,\n      }),\n    ]).start(() => {\n      onHide();\n    });\n  }, []);\n\n  return (\n    <Animated.View\n      style={{\n        opacity,\n        padding: 8,\n        marginVertical: 5,\n        backgroundColor: \"rgba(255, 255, 255, 0.9)\",\n        borderRadius: 5,\n        shadowColor: \"black\",\n        shadowOffset: {\n          width: 0,\n          height: 3,\n        },\n        shadowOpacity: 0.15,\n        shadowRadius: 5,\n        elevation: 6,\n        transform: [\n          {\n            translateY: opacity.interpolate({\n              inputRange: [0, 1],\n              outputRange: [-20, 0],\n            }),\n          },\n        ],\n      }}\n    >\n      <Text style={styles.message}>{infoMessage}</Text>\n    </Animated.View>\n  );\n};\n\nexport default InfoMessage;\n\nconst styles = StyleSheet.create({\n  message: {\n    // color: \"#FFF\",\n    textAlign: \"center\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}